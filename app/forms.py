from django import forms
from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.models import Group
from .models import (
    Users, Program, Enrollment, AssignmentSubmission,
    Material, Assignment, Certificate
)

class BaseBootstrapForm(forms.ModelForm):
    def apply_bootstrap(self):
        for name, field in self.fields.items():
            widget = field.widget
            if isinstance(widget, forms.FileInput):
                widget.attrs.update({'class': 'form-control'})
            elif isinstance(widget, forms.Select):
                widget.attrs.update({'class': 'form-select'})
            elif isinstance(widget, forms.CheckboxInput):
                widget.attrs.update({'class': 'form-check-input'})
            elif isinstance(widget, forms.Textarea):
                widget.attrs.update({'class': 'form-control', 'rows': 4})
            else:
                widget.attrs.update({'class': 'form-control'})

            # –ö—Ä–∞—Å–∏–≤—ã–µ –ª–µ–π–±–ª—ã, –µ—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–∏—Ö
            if not field.label:
                field.label = name.replace('_', ' ').capitalize()

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.apply_bootstrap()


# üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
class RegistrationForm(BaseBootstrapForm):
    first_name = forms.CharField(label='–ò–º—è', required=False)
    last_name = forms.CharField(label='–§–∞–º–∏–ª–∏—è', required=False)
    middle_name = forms.CharField(label='–û—Ç—á–µ—Å—Ç–≤–æ', required=False)
    password1 = forms.CharField(label='–ü–∞—Ä–æ–ª—å', widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}))
    password2 = forms.CharField(label='–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å', widget=forms.PasswordInput(attrs={'class': 'form-control', 'placeholder': '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}))

    class Meta:
        model = Users
        fields = ['username', 'first_name', 'last_name', 'middle_name']
        labels = {
            'username': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        }

    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return password2

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data["password1"])
        if commit:
            user.save()
            group, _ = Group.objects.get_or_create(name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            user.groups.add(group)
        return user



# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
class LoginForm(AuthenticationForm):
    username = forms.CharField(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", widget=forms.TextInput(attrs={
        'class': 'form-control',
        'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'autofocus': True
    }))
    password = forms.CharField(label="–ü–∞—Ä–æ–ª—å", widget=forms.PasswordInput(attrs={
        'class': 'form-control',
        'placeholder': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
    }))


# üë§ –ü—Ä–æ—Ñ–∏–ª—å
class ProfileEditForm(BaseBootstrapForm):
    class Meta:
        model = Users
        fields = ['username', 'first_name', 'last_name', 'middle_name']


# üßæ –ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É
class EnrollmentForm(BaseBootstrapForm):
    class Meta:
        model = Enrollment
        fields = []


# üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è
class AssignmentSubmissionForm(BaseBootstrapForm):
    class Meta:
        model = AssignmentSubmission
        fields = ['answer_text', 'answer_file']
        labels = {
            'answer_text': '–û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º',
            'answer_file': '–§–∞–π–ª —Å —Ä–µ—à–µ–Ω–∏–µ–º',
        }
        widgets = {
            'answer_text': forms.Textarea(attrs={'placeholder': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç‚Ä¶'}),
        }


# üßë‚Äçüè´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è
class SubmissionReviewForm(BaseBootstrapForm):
    class Meta:
        model = AssignmentSubmission
        fields = ['status']
        labels = {'status': '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏'}
        widgets = {
            'status': forms.Select(choices=[
                ('accepted', '–ü—Ä–∏–Ω—è—Ç–æ'),
                ('rejected', '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏')
            ])
        }


# üìÅ –ú–∞—Ç–µ—Ä–∏–∞–ª
class MaterialForm(BaseBootstrapForm):
    class Meta:
        model = Material
        fields = ['module', 'title', 'file', 'file_type', 'description']
        labels = {
            'module': '–ú–æ–¥—É–ª—å',
            'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
            'file': '–§–∞–π–ª',
            'file_type': '–¢–∏–ø —Ñ–∞–π–ª–∞',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ',
        }
        widgets = {
            'description': forms.Textarea(attrs={'placeholder': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'}),
        }


# üóíÔ∏è –ó–∞–¥–∞–Ω–∏–µ
class AssignmentForm(BaseBootstrapForm):
    class Meta:
        model = Assignment
        fields = ['module', 'title', 'description']
        labels = {
            'module': '–ú–æ–¥—É–ª—å',
            'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
        }
        widgets = {
            'description': forms.Textarea(attrs={'placeholder': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è'}),
        }


# üéì –ü—Ä–æ–≥—Ä–∞–º–º–∞
class ProgramForm(BaseBootstrapForm):
    class Meta:
        model = Program
        fields = ['name', 'description', 'section', 'goal', 'skills', 'certificate_image', 'curators']
        labels = {
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
            'description': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
            'section': '–†–∞–∑–¥–µ–ª',
            'goal': '–¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è',
            'skills': '–ù–∞–≤—ã–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è',
            'certificate_image': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
            'curators': '–ö—É—Ä–∞—Ç–æ—Ä—ã',
        }
        widgets = {
            'description': forms.Textarea(attrs={'placeholder': '–û–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã'}),
            'goal': forms.Textarea(attrs={'placeholder': '–ß—Ç–æ –∏–∑—É—á–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏'}),
            'skills': forms.Textarea(attrs={'placeholder': '–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—É—á–∞—Ç'}),
            'certificate_image': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            }),
        }


# üèÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
class CertificateForm(BaseBootstrapForm):
    class Meta:
        model = Certificate
        fields = ['user', 'program', 'file']
        labels = {
            'user': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'program': '–ü—Ä–æ–≥—Ä–∞–º–º–∞',
            'file': '–§–∞–π–ª —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞',
        }


# ‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
class AddFavoriteForm(forms.Form):
    program_id = forms.IntegerField(widget=forms.HiddenInput())
